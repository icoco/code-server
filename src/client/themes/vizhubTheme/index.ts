import { tags as t } from '@lezer/highlight';
import {
  createTheme,
  CreateThemeOptions,
} from '@uiw/codemirror-themes';

import { hcl } from 'd3-color';

const sidebarDark = hcl('#3d4b65');
const sidebarLight = hcl('#5b677d');

const luminaceDifference = sidebarLight.l - sidebarDark.l;

const backgroundLuminance =
  sidebarDark.l - luminaceDifference * 1.1;
export const backgroundColor = hcl(
  sidebarDark.h,
  sidebarDark.c,
  backgroundLuminance,
).formatHex();

const luminance = 90;

// The luminance difference between background and foreground
// measured in the OneDark Pro VSCode theme.
// const oneDarkContrast = 62;

// Use this to check luminance difference (contrast).
// console.log(luminance - backgroundLuminance);

const saturation = 70;
export const light = hcl(0, 0, luminance).formatHex();
const dark = hcl(
  sidebarDark.h,
  sidebarDark.c,
  80,
).formatHex();

export const defaultRotation = 0.397;

export const vizhubThemeColorsComputation = () => {
  const rotation = defaultRotation;
  const entries = [
    'keyword',
    [
      'tag',
      'variable',
      'variable2',
      'variable3',
      'definition',
    ],
    ['qualifier', 'builtin', 'header'],
    ['string', 'string2'],
    ['atom', 'number'],
    ['link', 'attribute', 'property'],
  ];

  const lightEntries = ['operator'];

  const theme: any = {
    container: {
      color: light,
      backgroundColor,
    },
    headerBackgroundColor: hcl(
      sidebarDark.h,
      sidebarDark.c,
      (backgroundLuminance + sidebarDark.l) / 2,
    ).formatHex(),
    selectionBackground: '#000',
    lineNumbers: {
      color: 'rgba(255,255,255,0.2)',
      cursor: 'pointer',
    },
    comment: { color: dark },
    meta: { color: dark },
    fatCursor: {
      backgroundColor: 'rgba(228, 232, 255, 0.3)',
    },
    default: { color: light },
    link: {
      cursor: 'pointer',
    },
  };

  theme.searching = theme.fatCursor;

  theme.colors = entries.map((entry, i) => {
    const t = ((i + 0) / entries.length + rotation) % 1;
    const color = hcl(
      t * 360,
      saturation,
      luminance,
    ).formatHex();
    const keys =
      typeof entry === 'string' ? [entry] : entry;
    keys.forEach((key) => {
      theme[key] = Object.assign({}, theme[key], { color });
    });
    return color;
  });

  theme.link.textDecoration = 'none';
  theme.header.fontWeight = 'normal';

  lightEntries.forEach((key) => {
    theme[key] = { color: light };
  });

  theme.colors.push(theme.colors[0]);
  theme.colors.push(light);

  theme.caretColor = 'white';

  theme.gutters = theme.gutter = Object.assign(
    {},
    theme.container,
    {
      border: 'none',
    },
  );

  theme.matchingBracket = {
    color: theme.container.color,
    borderBottom: '1px solid rgba(255,255,255,0.4)',
  };

  return theme;
};

// Generated by vizhubThemeColorsComputation in vizhubTheme.test
export const vizhubThemeColors =
  vizhubThemeColorsComputation();

// Inspired by https://github.com/uiwjs/react-codemirror/blob/master/themes/vscode/src/index.ts
export const defaultSettingsVizhub: CreateThemeOptions['settings'] =
  {
    background: vizhubThemeColors.container.backgroundColor,
    foreground: vizhubThemeColors.default.color,
    caret: vizhubThemeColors.caretColor,
    selection: vizhubThemeColors.selectionBackground,
    selectionMatch:
      vizhubThemeColors.searching.backgroundColor,
    lineHighlight: vizhubThemeColors.selectionBackground,
    gutterBackground:
      vizhubThemeColors.gutter.backgroundColor,
    gutterForeground: vizhubThemeColors.gutter.color,
    gutterActiveForeground: vizhubThemeColors.default.color,
    // I believe we inherit font family from CSS elsewhere
    // fontFamily:
    //   'Menlo, Monaco, Consolas, "Andale Mono", "Ubuntu Mono", "Courier New", monospace',
  };

export function vizhubThemeInit(
  options?: Partial<CreateThemeOptions>,
) {
  const {
    theme = 'dark',
    settings = {},
    styles = [],
  } = options || {};
  return createTheme({
    theme: theme,
    settings: {
      ...defaultSettingsVizhub,
      ...settings,
    },
    styles: [
      {
        tag: [
          t.keyword,
          t.operatorKeyword,
          t.modifier,
          t.color,
          t.constant(t.name),
          t.standard(t.name),
          t.standard(t.tagName),
          t.special(t.brace),
          t.atom,
          t.bool,
          t.special(t.variableName),
        ],
        color: vizhubThemeColors.keyword.color,
        // color: '#ff0000',
      },
      {
        tag: [t.controlKeyword, t.moduleKeyword],
        color: vizhubThemeColors.builtin.color,
      },
      {
        tag: [
          t.name,
          t.deleted,
          t.character,
          t.macroName,
          t.propertyName,
          t.variableName,
          t.labelName,
          t.definition(t.name),
        ],
        color: vizhubThemeColors.variable.color,
      },
      {
        tag: t.heading,
        fontWeight: vizhubThemeColors.header.fontWeight,
        color: vizhubThemeColors.header.color,
      },
      {
        tag: [
          t.typeName,
          t.className,
          t.tagName,
          t.number,
          t.changed,
          t.annotation,
          t.self,
          t.namespace,
        ],
        color: vizhubThemeColors.tag.color,
      },
      {
        tag: [
          t.function(t.variableName),
          t.function(t.propertyName),
        ],
        color: vizhubThemeColors.attribute.color,
      },
      {
        tag: [t.number],
        color: vizhubThemeColors.number.color,
      },
      {
        tag: [
          t.operator,
          t.punctuation,
          t.separator,
          t.url,
          t.escape,
          t.regexp,
        ],
        color: vizhubThemeColors.operator.color,
      },
      {
        tag: [t.regexp],
        color: vizhubThemeColors.atom.color,
      },
      {
        tag: [
          t.special(t.string),
          t.processingInstruction,
          t.string,
          t.inserted,
        ],
        color: vizhubThemeColors.string.color,
      },
      {
        tag: [t.angleBracket],
        color: vizhubThemeColors.operator.color,
      },
      { tag: t.strong, fontWeight: 'bold' },
      { tag: t.emphasis, fontStyle: 'italic' },
      {
        tag: t.strikethrough,
        textDecoration: 'line-through',
      },
      {
        tag: [t.meta, t.comment],
        color: vizhubThemeColors.comment.color,
      },
      {
        tag: t.link,
        color: vizhubThemeColors.link.color,
        textDecoration:
          vizhubThemeColors.link.textDecoration,
      },
      { tag: t.invalid, color: '#ff0000' },
      ...styles,
    ],
  });
}

export const vizhubTheme = vizhubThemeInit();
